{
  "New Controller File": {
    "scope": "typescript",
    "prefix": "ncf",
    "body": [
      "import type { Request, Response } from \"express\";",
      "import type { ControllerState } from \"../types\";",
      "import { UserError } from \"../../util/error\";",
      "",
      "async function ${1:reqHandler}(req: Request, res: Response, next: Function) {",
      "  const state: ControllerState = {dataErrors: {}, failMsg: false };",
      "  try {",
      "    const validator = new Validator(state);",
      "    const userId = req.user.id;",
      "    $0",
      "    if (state.failMsg) {",
      "      throw new UserError(400, state.failMsg);",
      "    }",
      "",
      "    res.locals = {",
      "      error: false,",
      "      code: 200,",
      "      message: \"success\",",
      "      payload: {",
      "        errors: state.dataErrors,",
      "      },",
      "  } catch (err) {",
      "    if (err instanceof UserError) {",
      "      res.locals = {",
      "        error: true,",
      "        code: err.code || 400,",
      "        message: err.message || \"unknown client error\",",
      "        payload:",
      "          {",
      "            errors: state.dataErrors,",
      "          }",
      "      };",
      "      next();",
      "      return;",
      "    }",
      "",
      "    logger.error(2,\"${1} controller:\", {",
      "      userId: req.user?.id,",
      "      error: err,",
      "      headers: req.headers,",
      "      body: req.body,",
      "    });",
      "",
      "    res.locals = {",
      "      error: true,",
      "      code: 500,",
      "      message: \"internal server error\",",
      "      payload:",
      "        {",
      "          errors: state.dataErrors,",
      "        }",
      "    };",
      "    next();",
      "  }",
      "}",
      "",
      "export default ${1:reqHandler};"
    ]
  },
  "Export Async Controller Function": {
    "scope": "typescript",
    "prefix": "eacf",
    "body": [
      "async function ${1:reqHandler}(req: Request, res: Response, next: Function) {",
      "  const state: ControllerState = {dataErrors: {}, failMsg: false };",
      "  try {",
      "    const validator = new Validator(state);",
      "    const userId = req.user.id;",
      "    $0",
      "    if (state.failMsg) {",
      "      throw new UserError(400, state.failMsg);",
      "    }",
      "",
      "    res.locals = {",
      "      error: false,",
      "      code: 200,",
      "      message: \"success\",",
      "      payload: {",
      "        errors: state.dataErrors,",
      "      },",
      "  } catch (err) {",
      "    if (err instanceof UserError) {",
      "      res.locals = {",
      "        error: true,",
      "        code: err.code || 400,",
      "        message: err.message || \"unknown client error\",",
      "        payload:",
      "          {",
      "            errors: state.dataErrors,",
      "          }",
      "      };",
      "      next();",
      "      return;",
      "    }",
      "",
      "    logger.error(2,\"${1} controller:\", {",
      "      userId: req.user?.id,",
      "      error: err,",
      "      headers: req.headers,",
      "      body: req.body,",
      "    });",
      "",
      "    res.locals = {",
      "      error: true,",
      "      code: 500,",
      "      message: \"internal server error\",",
      "      payload:",
      "        {",
      "          errors: state.dataErrors,",
      "        }",
      "    };",
      "    next();",
      "  }",
      "}"
    ]
  }
}
